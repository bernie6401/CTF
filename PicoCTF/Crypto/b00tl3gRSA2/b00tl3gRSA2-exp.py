# import gmpy2
# import binascii
# import time
# from Crypto.Util.number import long_to_bytes
# from tqdm import trange

# n = 77239301731609749114157530652202034362188581498039824919492245938278370846131323028699754495845543812311245886488398252225854351393303518170715464391515260153144676131604682878062763815014360628454996777715507518764536220875852399843181266426854485974922945531767317055170954223177871757205401659650944226319
# e = 72838557836316543700539815171552593644602909842125139989614710403640968512496058060984343609056596185853364199194996371245471664543087680752929304755921335074661533908876859193663996370368982402213547225436243746545682428741691667904225703092254117597772683272729059605095536456277200869148846329140251499497
# res = 0   #res是m
# c = 66844874027273172093579303691660038568983515252741204266971375086483304808784447509581661125247849380017434424109217346782660352720834717112658667098615302362381263620335045953152212002531065111819076629132389575564577186791113630780896199899868511323133410454438079282251451963626818145673348246108083097439
# print(time.asctime())
# for k in trange(200000000, 200000000*2):
#     if gmpy2.iroot(c+n*k,3)[1] == 1:
#         res = gmpy2.iroot(c+n*k,3)[0]
#         print(k,res)
#         print(long_to_bytes(res))  
#         print(time.asctime())
#         break

# import gmpy2
# import time
# from tqdm import trange
# import sys

# # 展开为连分数
# def continuedFra(x, y):
#     cF = []
#     while y:
#         cF += [x / y]
#         x, y = y, x % y
#     return cF

# def Simplify(ctnf):
#     numerator = 0
#     denominator = 1
#     for x in ctnf[::-1]:
#         numerator, denominator = denominator, x * denominator + numerator
#     return (numerator, denominator)

# # 连分数化简
# def calculateFrac(x, y):
#     cF = continuedFra(x, y)
#     cF = list(map(Simplify, (cF[0:i] for i in trange(1, len(cF)))))
#     return cF

# # 解韦达定理
# def solve_pq(a, b, c):
#     par = gmpy2.isqrt(b * b - 4 * a * c)
#     return (-b + par) / (2 * a), (-b - par) / (2 * a)

# def wienerAttack(e, n):
#     for (d, k) in calculateFrac(e, n):
#         if k == 0: continue
#         if (e * d - 1) % k != 0: continue

#         phi = (e * d - 1) / k
#         p, q = solve_pq(1, gmpy2.mpz(n - phi + 1), gmpy2.mpz(n))
#         if p * q == n:
#             return abs(int(p)), abs(int(q))
#     print('not find!')
#     sys.exit(0)

# time.asctime()
# # n = 12238605063252292170613110607692779326628090745751955692266649177882959231822580682548279800443278979485092243645806337103841086023159482786712759291169541633901936290854044069486201989034158882661270017305064348254800318759062921744741432214818915527537124001063995865927527037625277330117588414586505635959411443039463168463608235165929831344586283875119363703480280602514451713723663297066810128769907278246434745483846869482536367912810637275405943566734099622063142293421936734750356828712268385319217225803602442033960930413469179550331907541244416573641309943913383658451409219852933526106735587605884499707827
# # e = 11850552481503020257392808424743510851763548184936536180317707155841959788151862976445957810691568475609821000653594584717037528429828330763571556164988619635320288125983463358648887090031957900011546300841211712664477474767941406651977784177969001025954167441377912326806132232375497798238928464025466905201977180541053129691501120197010080001677260814313906843670652972019631997467352264392296894192998971542816081534808106792758008676039929763345402657578681818891775091140555977382868531202964486261123748663752490909455324860302967636149379567988941803701512680099398021640317868259975961261408500449965277690517
# # c = 9472193174575536616954091686751964873836697237500198884451530469300324470671555310791335185133679697207007374620225900775502162690848135615431624557389304657410880981454777737587420426091879654002644281066474715074536611611252677882396384453641127487515845176069574754606670518031472235144795376526854484442135299818868525539923568705203042265537204111153151119105287648912908771710419648445826883069030285651763726003413418764301988228077415599665616637501056116290476861280240577145515875430665394216054222788697052979429015400411487342877096677666406389711074591330476335174211990429870900468249946600544116793793
# c = 56811169374970604258879254822752913202698796852666466049062507281296833525794733933911606542222058381462570064389043798511821976201439555996087100908424109130076018300965272821022540600753461592318517243041444023628038886623171367273746266838142957409528381844138653228764240191549418194103631719400458457467
# n = 58070026135855523239461918454846975979926839142742523564643445392568377118997543017140325578838063916989981257526294599185581601337665038563515627572917307698324180632146478826058737890134680323581229835600225464118844212164933670376706076943294749341174871787564338433388944984493037567781794408220522036263
# e = 36130176628708131522838994566654566009391592426941561879120208879371471770209863345391365424152782310438126184550592620601969503885509400986708473532710919272338089391139828798480407038661283690225490135620650318136420441354969537269806129891673717369657476436221539029150435924295108842265903755215180202497

# p, q = wienerAttack(e, n)

# print('[+]Found!')
# print('  [-]p =',p)
# print('  [-]q =',q)
# print('  [-]n =',p*q)
# d = gmpy2.invert(e,(p-1)*(q-1))
# print('  [-]d =', d)
# print('  [-]m is:' + '{:x}'.format(pow(c,d,n)).decode('hex'))
# print('\n[!]Timer:', round(time.clock(),2), 's')
# print('[!]All Done!')


import gmpy2
from Crypto.PublicKey import RSA
import ContinuedFractions, Arithmetic
from Crypto.Util.number import long_to_bytes 

def wiener_hack(e, n):
    # firstly git clone https://github.com/pablocelayes/rsa-wiener-attack.git !
    frac = ContinuedFractions.rational_to_contfrac(e, n)
    convergents = ContinuedFractions.convergents_from_contfrac(frac)
    for (k, d) in convergents:
        if k != 0 and (e * d - 1) % k == 0:
            phi = (e * d - 1) // k
            s = n - phi + 1
            discr = s * s - 4 * n
            if (discr >= 0):
                t = Arithmetic.is_perfect_square(discr)
                if t != -1 and (s + t) % 2 == 0:
                    print("Hacked!")
                    return d
    return False
def main():
    # n = 460657813884289609896372056585544172485318117026246263899744329237492701820627219556007788200590119136173895989001382151536006853823326382892363143604314518686388786002989248800814861248595075326277099645338694977097459168530898776007293695728101976069423971696524237755227187061418202849911479124793990722597L
    # e = 354611102441307572056572181827925899198345350228753730931089393275463916544456626894245415096107834465778409532373187125318554614722599301791528916212839368121066035541008808261534500586023652767712271625785204280964688004680328300124849680477105302519377370092578107827116821391826210972320377614967547827619L
    # c = 38230991316229399651823567590692301060044620412191737764632384680546256228451518238842965221394711848337832459443844446889468362154188214840736744657885858943810177675871991111466653158257191139605699916347308294995664530280816850482740530602254559123759121106338359220242637775919026933563326069449424391192
    c = 56811169374970604258879254822752913202698796852666466049062507281296833525794733933911606542222058381462570064389043798511821976201439555996087100908424109130076018300965272821022540600753461592318517243041444023628038886623171367273746266838142957409528381844138653228764240191549418194103631719400458457467
    n = 58070026135855523239461918454846975979926839142742523564643445392568377118997543017140325578838063916989981257526294599185581601337665038563515627572917307698324180632146478826058737890134680323581229835600225464118844212164933670376706076943294749341174871787564338433388944984493037567781794408220522036263
    e = 36130176628708131522838994566654566009391592426941561879120208879371471770209863345391365424152782310438126184550592620601969503885509400986708473532710919272338089391139828798480407038661283690225490135620650318136420441354969537269806129891673717369657476436221539029150435924295108842265903755215180202497
    d = wiener_hack(e, n)
    m = pow(c, d, n)
    print(long_to_bytes(m))
if __name__=="__main__":
    main()