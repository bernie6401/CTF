from Crypto.Util.number import *
from sage.all import *
from os import urandom
from tqdm import trange


# integer_root(2**20, 21) = 1
def integer_root(cipher, mod, n=3):
    for i in trange(130000):
        trial = ZZ(cipher + i * mod).nth_root(n, truncate_mode=1)
        # print(trial)
        if(trial[1]):
            return trial[0]
        
    return None

if __name__ == '__main__':

    n   = 20782094472022109913631053818123481314358944883396654584516175755337955289128841997397141690858683591346710225928026680210031134488162388853901104522000425177038869537184711096682800321172870549969722352041029574813559027093774535381141473019256619664357125684984109218433340074987224018864651250110207302474620251730005617102482997519993822019400267427066397925336137098715014071432685862189893780805644936375709083564314558208329155294583964820538153811106221663859745695780810934702838639809694604134389094620698953597448326299416854544126162177248901039969526974298949384764574521733836369894812160498414061278457
    es  = [335337, 313179, 269499, 379023, 371181, 270051, 220263, 340071, 331257, 323571, 291219, 242967, 250329, 376413, 260571, 299067, 323151, 252741, 284433, 284997, 348423, 283317, 273711, 228309, 320079, 387507, 261969, 372891, 201171, 255999, 336783, 359097, 380199, 389523, 319119, 210963, 338271, 314733, 302307, 388599, 303189, 281847, 311097, 230619, 206673, 196743, 338853, 372441, 319323, 279921, 253947, 374007, 277869, 219543, 228477, 252051, 381651, 210963, 235461, 333363, 224493, 302079, 248343, 337749, 228759, 316221, 352059, 222231, 312843, 345963, 361149, 253041, 296679, 389121, 207033, 313581, 287673, 226011, 253263, 217263, 334023, 298821, 234579, 370551, 201219, 318309, 244119, 207201, 250491, 206211, 258729, 273477, 228729, 202497, 245607, 340467, 358539, 383127, 304431, 202281]
    ct1 = 19709743339564991804745681115350974372218624590145295802653022468829666431062762354693488775038538517971874948390047688873629817259587030666447031169862529158085441779725040499056422480291136903603954644304255737741035865182817441587372965818712406675073361927388455300368033314471690855039561675596434398805610888413683006957007149075165107751889836036211829189707158707161053627042709933130100558040673044576246215229316759458111911263969916816199728299939403886659211227589012138349192265860651321454855635391254622100851097667564422565303625802434012342400168311644481172125168020823080267961123371034855932354916
    ct2 = 3144096154592910529360143032579454468513076244255719410364100435366987913839116217794544574076666469176273818794720632620929327592877795439390571015644946470430387325459620216625122790371215233469473167531757391134016035626115279844206675821962817812047440715912759250522087934960874603377231959891998816377704543935736564408410454393529587586434819555459554651268212362722358933708539958292122558547910920833059403504654129556083401510281318870186055182605989663027327210726708592147792782370105881543186498558353214098414079098151562885483861802934327453409113360413706279722173079071697336629295774554840355204563
    
    # let e1 = 3*p1
    # [NOTE] use c1 ^ e2 = c2 ^ e1 to find e1, e2
    e1 = 0
    e2 = 0
    found = False
    for i in range(len(es)):
        if(found):
            break
        e2 = es[i]
        for j in range(i+1, len(es)):
            e1 = es[j]
            if(pow(ct1, e2, n) == pow(ct2, e1, n)):
                found = True
                break

    print("e1 e2:", e1, e2)
    gcd, r1, r2 = xgcd(e1, e2)
    print(gcd, r1, r2)

    ciphered = pow(ct1, r1, n) * pow(ct2, r2, n)
    print(ciphered)
    ciphered = int(ciphered)
    print(ciphered)
    # BF 3 root
    root = integer_root(ciphered, n, 3)
    print(long_to_bytes(root))
    # AEGIS{ju57_bru73_f0rc3_4nd_36cd_anVzdF9ic}